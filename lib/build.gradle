/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'org.springframework.boot' version '2.5.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

group = 'com.mimecast'
version = '0.0.1-SNAPSHOT'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {

   implementation 'org.springframework.boot:spring-boot-starter-web:2.5.3'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb:2.5.3'
	testImplementation 'org.springframework.boot:spring-boot-starter-test:2.5.3'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'

	// Recommended to start mongo with docker
	// If you are using mongo on docker, comment the following line and re run gradle sync
	implementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:3.0.0'
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:30.1.1-jre'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
